

setwd("E:/Work/Tomodata/")

library(tidyverse) #dplyr, readr, magrittr, ggplot2.... a lot of tidyverse basically
library(scales) #a log transform for an axis in the plots
library(patchwork) #multiple plots in one pane
library(roxygen2)
transcripts.in <- read_delim("L4.2.1_ES44/HUB-ES-t044_HKWWNBGXG_S5_R2.TranscriptCounts.tsv", delim = "\t")
#Reads
counts.in <- read_delim("L4.2.1_ES44/HUB-ES-t044_HKWWNBGXG_S5_R2.ReadCounts.tsv", delim = "\t")

#UMIs
UMIs.in <- read_delim("L4.2.1_ES44/HUB-ES-t044_HKWWNBGXG_S5_R2.BarcodeCounts.tsv", delim = "\t")


darktheme <- theme(axis.line = element_line(colour="white", size = 1),
                   axis.text = element_text(colour = "white", size = 12),
                   strip.text = element_text(colour = "white", size = 14),
                   legend.text = element_text(colour = "white", size = 12),
                   axis.title = element_text(colour = "white", size = 16),
                   axis.ticks = element_line(colour = "white", size = 1),
                   legend.title = element_text(colour = "white", size = 14),
                   plot.background = element_rect(colour = "Gray10", fill = "Gray10"),
                   panel.grid = element_blank(),
                   panel.background = element_rect(colour = "Gray15", fill = "Gray15"),
                   legend.background = element_rect(colour = "black", fill = "black"),
                   legend.key = element_rect(colour = "black", fill = "black"),
                   strip.background = element_rect(colour = "black", fill = "gray20"),
                   text = element_text(colour = "white", family = "sans"))


lighttheme <-   theme(axis.line = element_line(colour="Gray10", size = 1),
                      axis.text = element_text(colour = "black"),
                      panel.grid = element_blank(),
                      plot.background = element_rect(fill = "white"),
                      panel.background = element_rect(fill = "white"),
                      legend.background = element_rect(fill = "white"),
                      legend.key = element_rect(fill = "white", colour = "white"),
                      strip.background = element_rect(fill = "gray80"),
                      strip.text = element_text(colour = "black"),
                      text = element_text(colour = "black", family = "sans"))



max(column_to_rownames(counts.in, colnames(counts.in[1])))

max(column_to_rownames(UMIs.in, colnames(UMIs.in[1])))
((column_to_rownames(counts.in, colnames(counts.in[1]))%>%select(36))/ (column_to_rownames(UMIs.in, colnames(UMIs.in[1]))%>%select(36)))%>%view


column_to_rownames(counts.in, colnames(counts.in[1]))%>%select(36)


counts.in%>%filter(GENEID == "T23G4.1")%>%  select(37)

UMIs.in%>%filter(GENEID == "T23G4.1")%>%  select(37)


#T23G4.1

#' @param transcripts data.frame containing transcript counts (reads corrected using UMIs), with gene names as rownames
#' @param counts data.frame containing read counts, with gene names as rownames
#' @params umis data.frame containing UMI counts, with genen names as rownames
#' @params plot_title a string to title the QC plot
#' @params cutoff_spike a cutoff value for spike-in ratio (ranges from 0 to 1)
#' @params cutoff_genes a cutoff value for minimum unique gene count per slice
#' @params spike_ins Controls whether spike-ins were used, and thus if a spike-ins percentage plot should be generated. Default = TRUE
#' @params barcodes this is probably gone in the final version
#' @return Provides various QC plots to quickly assess the quality of tomo-seq data

#' @export

tomo_diagnostic <- function(transcripts, reads, umis, plot_title = "QC plots", cutoff_spike = 0.25, cutoff_genes = 2000, spike_ins = T, barcodes = c(1:96)){

  os <- (column_to_rownames(reads, colnames(reads[1]))/column_to_rownames(umis, colnames(umis[1])))%>%
    pivot_longer(.,cols = 1:96)%>%
    na.omit
  assign("henk",os, envir=globalenv())
  overseq_plot <- ggplot(os, aes(x = value))+
    geom_histogram(binwidth = 0.1, fill = "deepskyblue") +
    labs(title = "Oversequencing",x = "Reads per UMI", y = "Occurrence") +
    scale_x_continuous(trans = log2_trans(), limits = c(0.9,16), breaks = c(1,2,4,8,16))+
    lighttheme

  spike_in_reads <- filter(transcripts, grepl("ERCC",transcripts$GENEID))

  inform <- tibble(slices = rank(barcodes),
                   genes =  colSums(filter(transcripts, !grepl("ERCC",transcripts$GENEID))[,-1]>0),
                   fraction = colSums(spike_in_counts[,-1])/colSums(transcripts[,-1]),
                   Wormslice = "Worm")
  inform$Wormslice[which(inform$fraction >cutoff_spike | inform$genes < cutoff_genes)] <- "not_worm"

  if(spike_ins){
    p <-   ggplot(inform, aes(x = slices, y = fraction, fill = Wormslice))+
      geom_col(width = 0.8)+
      geom_hline(aes(yintercept=cutoff_spike), col = "Gray10", size = 1)+
      ggtitle("Percentage of spike-ins in total reads per slice")+
      scale_fill_manual(values = c("Worm" = "deepskyblue",  "not_worm" = "magenta"))+
      scale_x_continuous(breaks = seq(1,96, by = 5))+
      scale_y_continuous(name = "Percentage", breaks = c(0, 0.25, 0.50, 0.75, 1.00), labels = c("0%", "25%", "50%", "75%", "100%"), expand = c(0,0))+
      xlab("Slices")+
      lighttheme+
      theme(legend.position = "none", axis.text.x = element_text(size = 8))
  }

  q <- ggplot(inform, aes(x = slices, y = genes, fill = Wormslice)) +
    geom_col(width = 0.8)+
    geom_hline(aes(yintercept=cutoff_genes), col = "Gray10", size = 1)+
    scale_fill_manual(values = c("Worm" = "deepskyblue", "not_worm" = "magenta"))+
    scale_y_log10() +
    scale_x_continuous(breaks = seq(1,96, by = 5))+
    xlab("Slices")+
    ylab("Genes")+
    lighttheme+
    theme(legend.position = "none", axis.text.x = element_text(size = 8)) +
    labs(title = "Unique genes")+
    coord_cartesian(ylim = c(100,20000))

  if(spike_ins){
    print(overseq_plot + (p + q + plot_layout(ncol = 1)) +  plot_layout(ncol = 2, widths = c(1,3))+ plot_annotation(title = plot_title))
  }else{
    print(overseq_plot + (q + plot_layout(ncol = 1)) +  plot_layout(ncol = 2, widths = c(1,3))+ plot_annotation(title = plot_title))
  }

  return(inform)
}

diag <- tomo_diagnostic(transcripts = transcripts.in, reads = counts.in, umis = UMIs.in, spike_ins = T)
diag


